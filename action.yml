name: "Lark Notification For Frontend"
description: "Send a Lark card notification depending on the card_type"
inputs:
  card_type:
    description: |
      Mode of notification for Lark card builder. Available options:
      - develop: Use in DEV environment. Show commit messages from recent pushes.
      - default: Use in UAT/PRD pipelines. Read from a static CSV for service names and versions.
      - matrix: Use in UAT/PRD pipelines (with matrix strategy). Supports dynamic module CSVs per module.
    required: true
  
  env:
    description: "e.g. DEV, UAT, PRD"
    required: true
  service_name:
    description: "e.g. github.event.repository.name"
    required: true
  actor:
    description: "e.g. github.actor"
    required: true
  repository:
    description: "e.g. github.repository"
    required: true
  tag:
    description: "develop use github.ref, default & matrix use github.event.inputs.tag"
    required: true
  webhook_token:
    description: "lark webhook token"
    required: true
  commit_messages:
    description: "(require for develop) e.g. toJson(github.event.commits)"
    required: false
  helm_chart_file_name:
    description: "(require for default) e.g. helm-chart/release_control_content.csv"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install jq
      uses: dcarbone/install-jq-action@v3.1.1

      # develop 
    - name: (develop) Commit messages to bullet list
      if: inputs.card_type == 'develop'
      id: commit_messages
      shell: bash
      run: |-
        commit_messages=$(echo '${{ inputs.commit_messages }}' | jq -r '.[].message' | sed 's/^/- /')
        commit_messages_json=$(printf "%s\n" "$commit_messages" | jq -Rs 'gsub("- \n-"; "     - ")')
        echo "commit_messages=$commit_messages_json" >> $GITHUB_OUTPUT

      # develop
    - name: (develop) Notify to Lark
      if: inputs.card_type == 'develop'
      shell: bash
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        REF: ${{ inputs.tag }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        COMMIT_MESSAGES: ${{ steps.commit_messages.outputs.commit_messages }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: ./scripts/frontend/send_dev_card.sh
      
      # default
    - name: (default) Notify to Lark
      if: inputs.card_type == 'default'
      shell: bash
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
        ENV: ${{ inputs.env }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
        HELM_CHART_FILE_NAME: ${{ inputs.helm_chart_file_name }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: ./scripts/frontend/send_default_card.sh

      # matrix
    - name: (matrix) Notify to Lark
      if: inputs.card_type == 'matrix'
      shell: bash
      env:
        ENV: ${{ inputs.env }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        ALL_SERVICE: ${{ inputs.service_name }}
        TAG: ${{ inputs.tag }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: ./scripts/frontend/send_matrix_card.sh
