name: "Lark Notification For Frontend"
description: "Send a Lark card notification depending on the card_type"
inputs:
  card_type:
    description: |
      Mode of notification for Lark card builder. Available options:
      - develop: Use in DEV environment. Show commit messages from recent pushes.
      - default: Use in UAT/PRD pipelines. Read from a static CSV for service names and versions.
      - matrix: Use in UAT/PRD pipelines (with matrix strategy). Supports dynamic module CSVs per module.
    required: true
  
  env:
    description: "e.g. DEV, UAT, PRD"
    required: true
  service_name:
    description: "e.g. github.event.repository.name"
    required: true
  actor:
    description: "e.g. github.actor"
    required: true
  repository:
    description: "e.g. github.repository"
    required: true
  tag:
    description: "develop use github.ref, default & matrix use github.event.inputs.tag"
    required: true
  webhook_token:
    description: "lark webhook token"
    required: true
  commit_messages:
    description: "(require for develop) e.g. toJson(github.event.commits)"
    required: false
  helm_chart_file_name:
    description: "(require for default) e.g. helm-chart/release_control_content.csv"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install jq
      uses: dcarbone/install-jq-action@v3.1.1

    # Checkout Helm chart repository
    - name: Checkout Helm chart repository
      uses: actions/checkout@v4
      with:
        repository: TAGTHAi/tgth-helm-chart
        path: ./helm-chart
        ref: ${{ env.TAG }}
        token: ${{ secrets.TGTH_GITHUB_ACCESS_TOKEN }}

      # develop 
    - name: (develop) Commit messages to bullet list
      if: inputs.card_type == 'develop'
      id: commit_messages
      shell: bash
      run: |-
        commit_messages=$(echo '${{ inputs.commit_messages }}' | jq -r '.[].message' | sed 's/^/- /')
        commit_messages_json=$(printf "%s\n" "$commit_messages" | jq -Rs 'gsub("- \n-"; "     - ")')
        echo "commit_messages=$commit_messages_json" >> $GITHUB_OUTPUT

      # develop
    - name: (develop) Notify to Lark
      if: inputs.card_type == 'develop'
      shell: bash
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        REF: ${{ inputs.tag }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        COMMIT_MESSAGES: ${{ steps.commit_messages.outputs.commit_messages }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: |-
        cat <<EOF > payload.json
        {
          "msg_type": "interactive",
          "card": {
            "type": "template",
            "data": {
              "template_id": "ctp_AA4OuaEvBdMQ",
              "template_variable": {
                "env": "DEV",
                "service_name": "$SERVICE_NAME",
                "deployer": "$GITHUB_ACTOR",
                "version": "$REF",
                "service_url": "https://github.com/$GITHUB_REPOSITORY",
                "commit_messages": $COMMIT_MESSAGES
              }
            }
          }
        }
        EOF

        echo "===== Payload JSON ====="
        cat payload.json
        echo "========================"

        RESPONSE=$(curl -s -X POST "$WEBHOOK_URL" \
          -H "Content-Type: application/json" \
          -d @payload.json)

        echo "Lark response: $RESPONSE"
        
      # default
    - name: (default) Notify to Lark
      if: inputs.card_type == 'default'
      shell: bash
      env:
        SERVICE_NAME: ${{ inputs.service_name }}
        ENV: ${{ inputs.env }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        TAG: ${{ inputs.tag }}
        HELM_CHART_FILE_NAME: ${{ inputs.helm_chart_file_name }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: |-
        service_lists="["
        while read -r line; do
          SERVICE_NAME_VAL=$(awk -F, '{print $1}' <<< "$line" | tr -d '[:space:]')
          VERSION=$(awk -F, '{print $2}' <<< "$line" | tr -d '[:space:]')
          if [ "$SERVICE_NAME_VAL" == "SERVICE" ]; then
            continue
          fi
          service_lists+="{\"service_name\": \"$SERVICE_NAME_VAL\", \"version\": \"$VERSION\"},"
        done < "$HELM_CHART_FILE_NAME"
        service_lists="${service_lists%,}"
        service_lists+="]"

        echo "Check service_lists."
        echo $service_lists

        if [ "$ENV" == "UAT" ]; then
          TEMPLATE_ID="ctp_AA48N2uQ1sNH"
        elif [ "$ENV" == "PRD" ]; then
          TEMPLATE_ID="ctp_AAd8OnbKSurj"
        else
          echo "Unknown ENV: $ENV"
          exit 1
        fi

        cat <<EOF > payload.json
        {
          "msg_type": "interactive",
          "card": {
            "type": "template",
            "data": {
              "template_id": "$TEMPLATE_ID",
              "template_variable": {
                "env": "$ENV",
                "app_version": "$TAG",
                "deployer": "$GITHUB_ACTOR",
                "service_lists": $service_lists
              }
            }
          }
        }
        EOF

        echo "===== Payload JSON ====="
        cat payload.json
        echo "========================"

        RESPONSE=$(curl -s -X POST "$WEBHOOK_URL" \
          -H "Content-Type: application/json" \
          -d @payload.json)

        echo "Lark response: $RESPONSE"

      # matrix
    - name: (matrix) Notify to Lark
      if: inputs.card_type == 'matrix'
      shell: bash
      env:
        ENV: ${{ inputs.env }}
        GITHUB_ACTOR: ${{ inputs.actor }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        ALL_SERVICE: ${{ inputs.service_name }}
        TAG: ${{ inputs.tag }}
        WEBHOOK_URL: ${{ inputs.webhook_token }}
      run: |-
        echo "$ALL_SERVICE" | jq -c '.' | jq -r '.[]' > modules.txt

        service_lists="["
        while read -r module; do
          echo "Processing module: $module"
          if [ ! -f "helm-chart/release_control_admin_web_${module}.csv" ]; then
            echo "File helm-chart/release_control_admin_web_${module}.csv not found!"
            continue
          fi

          while read -r line; do
            SERVICE_NAME=$(awk -F, '{print $1}' <<< "$line" | tr -d '[:space:]')
            VERSION=$(awk -F, '{print $2}' <<< "$line" | tr -d '[:space:]')
            if [ "$SERVICE_NAME" == "SERVICE" ]; then
              continue
            fi
            service_lists+="{\"service_name\": \"$SERVICE_NAME\", \"version\": \"$VERSION\"},"
          done < "helm-chart/release_control_admin_web_${module}.csv"
        done < modules.txt

        # Remove trailing comma
        service_lists="${service_lists%,}"
        service_lists+="]"

        echo "Check service_lists."
        echo $service_lists

        if [ "$ENV" == "UAT" ]; then
          TEMPLATE_ID="ctp_AA48N2uQ1sNH"
        elif [ "$ENV" == "PRD" ]; then
          TEMPLATE_ID="ctp_AAd8OnbKSurj"
        else
          echo "Unknown ENV: $ENV"
          exit 1
        fi

        cat <<EOF > payload.json
        {
          "msg_type": "interactive",
          "card": {
            "type": "template",
            "data": {
              "template_id": "$TEMPLATE_ID",
              "template_variable": {
                "env": "$ENV",
                "app_version": "$TAG",
                "deployer": "$GITHUB_ACTOR",
                "service_lists": $service_lists
              }
            }
          }
        }
        EOF

        echo "===== Payload JSON ====="
        cat payload.json
        echo "========================"

        RESPONSE=$(curl -s -X POST "$WEBHOOK_URL" \
          -H "Content-Type: application/json" \
          -d @payload.json)

        echo "Lark response: $RESPONSE"

